name: Build TDLib and Release

on:
  workflow_dispatch:
    inputs:
      tdlib:
        description: "TDLib git ref (e.g. v1.8.0 or a commit hash)"
        type: string
        required: true
      mode:
        type: choice
        description: Mode
        required: true
        default: build_publish
        options:
          - build
          - build_publish


jobs:
  prepare-meta:
    name: Extract TDLib metadata
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ steps.meta.outputs.version }}
      commit-hash: ${{ steps.meta.outputs.commit-hash }}
      commit-hash-short: ${{ steps.meta.outputs.commit-hash-short }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: "tdlib/td"
          ref: ${{ inputs.tdlib }}

      - name: Extract metadata
        id: meta
        run: |
          TDLIB_VERSION=$(grep -oP "(?<=project\\(TDLib VERSION ).*?(?= LANGUAGES CXX C\\))" CMakeLists.txt)
          TDLIB_COMMIT_HASH=$(git rev-parse HEAD)
          TDLIB_COMMIT_HASH_SHORT=${TDLIB_COMMIT_HASH:0:7}

          echo "version=$TDLIB_VERSION" >> $GITHUB_OUTPUT
          echo "commit-hash=$TDLIB_COMMIT_HASH" >> $GITHUB_OUTPUT
          echo "commit-hash-short=$TDLIB_COMMIT_HASH_SHORT" >> $GITHUB_OUTPUT

          # Create meta file for upload
          cat > meta.yml << EOF
          version: $TDLIB_VERSION
          commit-hash: $TDLIB_COMMIT_HASH
          EOF

      - uses: actions/upload-artifact@v4
        with:
          name: tdlib-meta
          path: |
            meta.yml
            td/generate/scheme/td_api.tl

  build-linux:
    name: Build TDLib on Linux
    runs-on: ${{ matrix.spec.os }}
    env:
      CMAKE_VERSION: "3.31.8"
      CLANG_VERSION: "14"
    strategy:
      matrix:
        spec:
          - os: ubuntu-22.04
            cmake_arch: x86_64
            arch: x64
            libc: glibc
          - os: ubuntu-22.04-arm
            cmake_arch: aarch64
            arch: arm64
            libc: glibc
        libc: [glibc, musl]
        exclude:
          # Use Docker for musl builds to avoid complexity
          - libc: musl

    steps:
      - uses: actions/checkout@v4
        with:
          repository: "tdlib/td"
          ref: ${{ inputs.tdlib }}

      - name: Cache CMake installation
        uses: actions/cache@v4
        with:
          path: ./cmake
          key: cmake-${{ env.CMAKE_VERSION }}-${{ matrix.spec.cmake_arch }}

      - name: Install dependencies
        run: |
          sudo apt-get update -q
          sudo apt-get install -y -q gperf clang-${{ env.CLANG_VERSION }} libc++-dev libc++abi-dev

      - name: Install CMake
        run: |
          if [ ! -d "./cmake" ]; then
            wget -q https://github.com/Kitware/CMake/releases/download/v${{ env.CMAKE_VERSION }}/cmake-${{ env.CMAKE_VERSION }}-linux-${{ matrix.spec.cmake_arch }}.sh
            chmod +x ./cmake-*.sh
            mkdir cmake
            ./cmake-*.sh --prefix=./cmake --skip-license
          fi
          sudo cp -RTv ./cmake /usr/
          cmake --version

      - name: Build TDLib
        run: |
          mkdir -p build && cd build
          cmake \
            -DCMAKE_CXX_COMPILER=/usr/bin/clang++-${{ env.CLANG_VERSION }} \
            -DCMAKE_C_COMPILER=/usr/bin/clang-${{ env.CLANG_VERSION }} \
            -DCMAKE_BUILD_TYPE=Release \
            -DTD_ENABLE_LTO=ON \
            -DCMAKE_AR=/usr/bin/llvm-ar-${{ env.CLANG_VERSION }} \
            -DCMAKE_NM=/usr/bin/llvm-nm-${{ env.CLANG_VERSION }} \
            -DCMAKE_OBJDUMP=/usr/bin/llvm-objdump-${{ env.CLANG_VERSION }} \
            -DCMAKE_RANLIB=/usr/bin/llvm-ranlib-${{ env.CLANG_VERSION }} \
            -DOPENSSL_USE_STATIC_LIBS=TRUE \
            -DZLIB_USE_STATIC_LIBS=TRUE \
            ..
          cmake --build . --target tdjson --parallel $(nproc)
          strip libtdjson.so

      - name: Verify build
        run: |
          uname -a
          ldd --version
          ldd build/libtdjson.so

      - uses: actions/upload-artifact@v4
        with:
          name: tdlib-linux-${{ matrix.spec.arch }}-${{ matrix.spec.libc }}
          path: build/libtdjson.so

  build-linux-musl:
    name: Build TDLib on Linux (musl)
    runs-on: ${{ matrix.spec.os }}
    strategy:
      matrix:
        spec:
          - os: ubuntu-22.04-arm
            arch: arm64
            platform: linux/arm64
          - os: ubuntu-22.04
            arch: x64
            platform: linux/amd64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build TDLib with musl
        uses: docker/build-push-action@v6
        with:
          push: false
          platforms: ${{ matrix.spec.platform }}
          build-args: GIT_REF=${{ inputs.tdlib }}
          tags: tdlib:build-${{ matrix.spec.arch }}
          file: ./Dockerfile.musl
          load: true
          cache-from: type=gha,scope=musl-${{ matrix.spec.arch }}
          cache-to: type=gha,mode=max,scope=musl-${{ matrix.spec.arch }}

      - name: Extract artifact
        run: |
          mkdir -p result
          container_id=$(docker create tdlib:build-${{ matrix.spec.arch }})
          docker cp $container_id:/result/libtdjson.so ./result/
          docker rm $container_id

      - uses: actions/upload-artifact@v4
        with:
          name: tdlib-linux-${{ matrix.spec.arch }}-musl
          path: ./result/libtdjson.so

  build-macos:
    name: Build TDLib on macOS
    runs-on: ${{ matrix.spec.os }}
    strategy:
      matrix:
        spec:
          - os: macos-13
            arch: x64
            opt: /usr/local/opt
          - os: macos-14
            arch: arm64
            opt: /opt/homebrew/opt

    steps:
      - uses: actions/checkout@v4
        with:
          repository: "tdlib/td"
          ref: ${{ inputs.tdlib }}

      - name: Cache Homebrew
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/Homebrew
            ${{ matrix.spec.opt }}/gperf
            ${{ matrix.spec.opt }}/openssl
            ${{ matrix.spec.opt }}/zlib
          key: homebrew-${{ matrix.spec.os }}-${{ hashFiles('**/Brewfile') || 'default' }}
          restore-keys: |
            homebrew-${{ matrix.spec.os }}-

      - name: Install dependencies
        run: |
          export HOMEBREW_NO_INSTALL_CLEANUP=1
          export HOMEBREW_NO_AUTO_UPDATE=1
          brew install gperf openssl zlib

      - name: Build TDLib
        run: |
          mkdir -p build && cd build
          cmake \
            -DCMAKE_BUILD_TYPE=Release \
            -DTD_ENABLE_LTO=ON \
            -DOPENSSL_ROOT_DIR=${{ matrix.spec.opt }}/openssl \
            -DZLIB_INCLUDE_DIR=${{ matrix.spec.opt }}/zlib/include \
            -DZLIB_LIBRARY=${{ matrix.spec.opt }}/zlib/lib/libz.a \
            -DOPENSSL_USE_STATIC_LIBS=TRUE \
            -DZLIB_USE_STATIC_LIBS=TRUE \
            ..
          cmake --build . --target tdjson --parallel $(sysctl -n hw.ncpu)

      - name: Verify build
        run: |
          uname -a
          ${{ matrix.spec.opt }}/openssl/bin/openssl version
          otool -L build/libtdjson.dylib

      - uses: actions/upload-artifact@v4
        with:
          name: tdlib-macos-${{ matrix.spec.arch }}
          path: build/libtdjson.dylib

  build-macos-universal:
    name: Create universal macOS library
    needs: [build-macos]
    runs-on: macos-13

    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: tdlib-macos-*

      - name: Create universal binary
        run: |
          mkdir -p universal
          lipo \
            tdlib-macos-x64/libtdjson.dylib \
            tdlib-macos-arm64/libtdjson.dylib \
            -output universal/libtdjson.dylib \
            -create

          # Verify the universal binary
          file universal/libtdjson.dylib
          otool -L universal/libtdjson.dylib

      - uses: actions/upload-artifact@v4
        with:
          name: tdlib-macos-universal
          path: universal/libtdjson.dylib

  build-windows:
    name: Build TDLib on Windows
    runs-on: windows-2022
    strategy:
      matrix:
        build:
          - arch: x86
            cmake_arch: Win32
            vcpkg_triplet: x86-windows-static
          - arch: x64
            cmake_arch: x64
            vcpkg_triplet: x64-windows-static

    steps:
      - uses: actions/checkout@v4
        with:
          repository: "tdlib/td"
          ref: ${{ inputs.tdlib }}

      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: |
            ~\AppData\Local\vcpkg\archives
            C:\vcpkg\installed
          key: vcpkg-${{ matrix.build.arch }}-${{ hashFiles('vcpkg.json') || 'default' }}
          restore-keys: |
            vcpkg-${{ matrix.build.arch }}-

      - name: Install dependencies
        run: |
          vcpkg update
          vcpkg install gperf:${{ matrix.build.vcpkg_triplet }} openssl:${{ matrix.build.vcpkg_triplet }} zlib:${{ matrix.build.vcpkg_triplet }}

      - name: Build TDLib
        shell: pwsh
        run: |
          mkdir build
          cd build
          cmake -A ${{ matrix.build.cmake_arch }} `
            -DCMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake `
            -DVCPKG_TARGET_TRIPLET=${{ matrix.build.vcpkg_triplet }} `
            -DOPENSSL_USE_STATIC_LIBS=TRUE `
            -DZLIB_USE_STATIC_LIBS=TRUE `
            ..
          cmake --build . --target tdjson --config Release --parallel $env:NUMBER_OF_PROCESSORS

      - uses: actions/upload-artifact@v4
        with:
          name: tdlib-windows-${{ matrix.build.arch }}
          path: build\Release\tdjson.dll

  organize-build-artifacts:
    name: Organize build artifacts
    runs-on: ubuntu-22.04
    needs:
      - prepare-meta
      - build-linux
      - build-linux-musl
      - build-macos
      - build-macos-universal
      - build-windows

    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: tdlib-*
          path: artifacts

      - name: Organize build files
        run: |
          mkdir -p build-release

          # Linux binaries
          cp artifacts/tdlib-linux-x64-glibc/libtdjson.so build-release/libtdjson-x64-glibc.so
          cp artifacts/tdlib-linux-arm64-glibc/libtdjson.so build-release/libtdjson-arm64-glibc.so
          cp artifacts/tdlib-linux-x64-musl/libtdjson.so build-release/libtdjson-x64-musl.so
          cp artifacts/tdlib-linux-arm64-musl/libtdjson.so build-release/libtdjson-arm64-musl.so

          # macOS binaries (individual + universal)
          cp artifacts/tdlib-macos-x64/libtdjson.dylib build-release/libtdjson-x64.dylib
          cp artifacts/tdlib-macos-arm64/libtdjson.dylib build-release/libtdjson-arm64.dylib
          cp artifacts/tdlib-macos-universal/libtdjson.dylib build-release/libtdjson-universal.dylib

          # Windows binaries
          cp artifacts/tdlib-windows-x86/tdjson.dll build-release/tdjson-x32.dll
          cp artifacts/tdlib-windows-x64/tdjson.dll build-release/tdjson-x64.dll

          # Metadata
          cp artifacts/tdlib-meta/meta.yml build-release/
          cp artifacts/tdlib-meta/td_api.tl build-release/

      - name: Delete intermediate artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            tdlib-linux-*
            tdlib-macos-*
            tdlib-windows-*
            tdlib-meta
          failOnError: false

      - uses: actions/upload-artifact@v4
        with:
          name: tdlib-build-complete
          path: build-release/*

  publish-release:
    if: inputs.mode == 'build_publish'
    name: Create GitHub Release
    runs-on: ubuntu-22.04
    needs:
      - prepare-meta
      - organize-build-artifacts
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/download-artifact@v4
        with:
          name: tdlib-release
          path: release

      - name: Update meta.yml in repository
        run: |
          cp release/meta.yml ./meta.yml
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add ./meta.yml
          if ! git diff --staged --quiet; then
            git commit -m "Update TDLib to ${{ inputs.tdlib }}"
            git push
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          make_latest: true
          tag_name: "0.${{ needs.prepare-meta.outputs.version }}-${{ needs.prepare-meta.outputs.commit-hash-short }}"
          name: "TDLib ${{ needs.prepare-meta.outputs.version }} (${{ needs.prepare-meta.outputs.commit-hash-short }})"
          body: |
            ## TDLib Build ${{ needs.prepare-meta.outputs.version }}

            Built from TDLib commit [`${{ needs.prepare-meta.outputs.commit-hash-short }}`](https://github.com/tdlib/td/tree/${{ needs.prepare-meta.outputs.commit-hash }})

            ### Included Binaries:
            - **Linux (glibc)**: `libtdjson-x64-glibc.so`, `libtdjson-arm64-glibc.so`
            - **Linux (musl)**: `libtdjson-x64-musl.so`, `libtdjson-arm64-musl.so`
            - **macOS**: `libtdjson-x64.dylib`, `libtdjson-arm64.dylib`, `libtdjson-universal.dylib`
            - **Windows**: `tdjson-x32.dll`, `tdjson-x64.dll`
            - **Schema**: `td_api.tl`
            - **Metadata**: `meta.yml`
          files: release/*
          token: ${{ secrets.GITHUB_TOKEN }}

  